/* Problem number: 160    Author: ctfu     */
/* Title: Intersection of Two Linked Lists */
/* Link: https://leetcode.com/problems/intersection-of-two-linked-lists/ */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
/* The method places focus on lists length, insteading of comparing list values. The program complexity is O(n+m).*/
/* If n > m, for the first n elements is to conteract the list position, the second m elements finds the answer.  */

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){   /* based case */
            return null;
        }
        ListNode a = headA;
        ListNode b = headB;
        while(a != b){
            a = a == null?headB:a.next;
            b = b == null?headA:b.next;
        }
        return a;   /* if no intersection, a and b will simply be null */
    }
}

/* Problem number: 237    Author: ctfu     */
/* Title: Delete node in a Linked List */
/* Link: https://leetcode.com/problems/delete-node-in-a-linked-list/ */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

/* Instead of deleting a node, this approach moves the each node value up front */
public class Solution {
    public void deleteNode(ListNode node) {
        ListNode previous = null;
        while(node.next != null){
            node.val = node.next.val;
            previous = node;
            node = node.next;
        }
        previous.next = node.next;
        
        /* more efficient approach by dirrectly setting the correct node reference as follow: */
        /* if(node.next != null){
              node.value = node.next.value;
              node.next = node.next.next;
            }
        */
    }
} 

/* Problem number: 328    Author: ctfu     */
/* Title: Odd Even LinkedList */
/* Link: https://leetcode.com/problems/odd-even-linked-list/ */

/* definition for lingle-linked list as abrove */
public class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        /* separate the list into odd and even list by chaning the pointers */
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = head.next;       /* maintain the head of the even list for last connectivity */
        while(even != null && even.next != null){
            odd.next = even.next;
            even.next = odd.next.next;  /* even can be null because of this */
            odd = odd.next;
            even = even.next;
        }
        odd.next = evenHead;
        return head;
    }
}
